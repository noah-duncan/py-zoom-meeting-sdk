cmake_minimum_required(VERSION 3.20.2)
project(zoom_sdk_python VERSION 1.0.1)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_COMPILER /usr/bin/g++)

set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR x86_64)

set(ZOOM_SDK lib/zoomsdk)

# Find nanobind
find_package(nanobind CONFIG REQUIRED)

find_package(ada REQUIRED)
find_package(CLI11 REQUIRED)
find_path(JWT_CPP_INCLUDE_DIRS "jwt-cpp/base.h")

find_package(X11 REQUIRED)
include_directories(${X11_INCLUDE_DIR})
link_directories(${X11_LIBRARIES})

link_directories(${ZOOM_SDK} ${ZOOM_SDK})
link_directories(${ZOOM_SDK} ${ZOOM_SDK}/qt_libs/**)

find_package(PkgConfig REQUIRED)
pkg_check_modules(deps REQUIRED IMPORTED_TARGET glib-2.0 gio-2.0)

include_directories(${ZOOM_SDK}/h)

# Create the Python module
nanobind_add_module(zoom_sdk_python src/pythonlib.cpp
    lib/zoomsdk/h/zoom_sdk.h
    src/events/AuthServiceEvent.cpp
    src/events/AuthServiceEvent.h
    src/events/MeetingServiceEvent.cpp
    src/events/MeetingServiceEvent.h     
    src/events/MeetingReminderEvent.cpp
    src/events/MeetingReminderEvent.h        
    src/events/MeetingRecordingCtrlEvent.cpp
    src/events/MeetingRecordingCtrlEvent.h
)

target_include_directories(zoom_sdk_python PRIVATE ${JWT_CPP_INCLUDE_DIRS})

# Link against the Zoom SDK dynamically
target_link_libraries(zoom_sdk_python PRIVATE 
    ada::ada 
    CLI11::CLI11 
    PkgConfig::deps 
    ${X11_LIBRARIES}
    -L${ZOOM_SDK} -lmeetingsdk
)

# Add runtime path for the Zoom SDK library
set_target_properties(zoom_sdk_python PROPERTIES
    INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib;${ZOOM_SDK}"
    BUILD_WITH_INSTALL_RPATH TRUE
)

# Set the output directory for the Python module
set_target_properties(zoom_sdk_python PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/python
)